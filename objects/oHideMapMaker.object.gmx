<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>-50</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Courtesy of tatman87 with help from NazGhuL.
// Create the surface and set the target.
hidden = surface_create(room_width,room_height);
surface_set_target(hidden);
{
    var tile, ix, iy, back1, back2, top, left, width, height;
    // If using different sizes of tile, change the 16s into whatever size tiles you use.
    // I use 16x16 in my case.
    for (ix = 0; ix &lt;= room_width; ix += 16)
    for (iy = 0; iy &lt;= room_height; iy += 16)
    {
        // Check each tile in layer -1, one at a time.
        tile = tile_layer_find(-1, ix, iy);
        if (tile != -1) then
        {
            back1 = tile_get_background(tile);
            top = tile_get_top(tile);
            left = tile_get_left(tile);
            width = tile_get_width(tile);
            height = tile_get_height(tile);
            // Use the above to draw the detected tiles to a partial background.
            draw_background_part(back1, left, top, width, height, ix, iy);
            tile_delete(tile);
        }
    }
    // Repeat, but with -2 as the layer, and back2 as the background index.
    for (ix = 0; ix &lt;= room_width; ix += 16)
    for (iy = 0; iy &lt;= room_height; iy += 16)
    {
        tile = tile_layer_find(-2, ix, iy);
        if (tile != -1) then
        {
            back2 = tile_get_background(tile);
            top = tile_get_top(tile);
            left = tile_get_left(tile);
            width = tile_get_width(tile);
            height = tile_get_height(tile);
            draw_background_part(back2, left, top, width, height, ix, iy);
            tile_delete(tile);
        }
    }
    // Take the completed background, convert it into a sprite.
    sprHideMap = sprite_create_from_surface(hidden,0,0,room_width,room_height,true,1,0,0);  
    // Assign the new sprite to an object, create the object, then cleanup.
    object_set_sprite(oHideMap,sprHideMap);
    instance_create(0,0,oHideMap);
    instance_destroy();
}
surface_free(hidden);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Pause();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
